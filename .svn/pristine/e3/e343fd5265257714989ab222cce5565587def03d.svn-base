<script setup>
import { ref, computed, watch } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { getMenuRoutes, getParentRoute } from '../../router/config'

const router = useRouter()
const route = useRoute()

// 接收父组件传递的折叠状态和布局类型
const props = defineProps({
  isCollapse: {
    type: Boolean,
    default: false
  },
  layoutType: {
    type: String,
    default: 'sidebar'
  }
})

// 从统一路由配置获取所有菜单项
const allMenuItems = getMenuRoutes()

// 获取当前路由所属的顶级菜单
const getCurrentParentMenu = () => {
  // 当前路径
  const currentPath = route.path
  
  // 先检查是否直接匹配到某个顶级菜单
  const directMatch = allMenuItems.find(item => item.path === currentPath)
  if (directMatch) return directMatch
  
  // 检查是否是某个顶级菜单的子路径
  for (const item of allMenuItems) {
    // 检查路径前缀
    if (currentPath.startsWith(item.path + '/') && item.path !== '/') {
      return item
    }
    
    // 检查子菜单
    if (item.children) {
      for (const child of item.children) {
        if (currentPath === child.path) {
          return item
        }
      }
    }
  }
  
  // 通过路由配置获取父路由
  return getParentRoute(currentPath)
}

// 根据布局类型和当前路由计算要显示的菜单项
const menuItems = computed(() => {
  // 顶部布局模式
  if (props.layoutType === 'top') {
    const parentMenu = getCurrentParentMenu()
    
    // 如果找到父菜单并且有子菜单，则显示子菜单
    if (parentMenu && parentMenu.children && parentMenu.children.length > 0) {
      return parentMenu.children
    }
    
    // 如果没有找到子菜单，返回空数组
    return []
  }
  
  // 侧边栏布局，返回所有菜单
  return allMenuItems
})

// 计算当前活动菜单
const activeMenu = computed(() => {
  return route.path
})

// 监听路由变化，确保在子路由切换时更新菜单项
watch(() => route.path, () => {
  // 仅用于触发重新计算菜单项
}, { immediate: true })

const handleSelect = (path) => {
  router.push(path)
}
</script>

<template>
  <div 
    class="sidebar" 
    :class="{ 
      'is-collapsed': isCollapse,
      'top-layout-sidebar': layoutType === 'top' 
    }"
  >
    <!-- 仅在侧边栏布局时显示logo -->
    <div v-if="layoutType === 'sidebar'" class="logo-container">
      <img src="/logo.png" class="logo" alt="系统logo" />
      <h2 v-if="!isCollapse" class="title">管理系统</h2>
    </div>

    <el-menu
      :default-active="activeMenu"
      class="el-menu-vertical"
      :collapse="isCollapse && layoutType === 'sidebar'"
      background-color="#001529"
      text-color="#fff"
      active-text-color="#409EFF"
      @select="handleSelect"
    >
      <template v-for="item in menuItems" :key="item.path">
        <!-- 有子菜单的情况 -->
        <el-sub-menu v-if="item.children && item.children.length" :index="item.path">
          <template #title>
            <el-icon><component :is="item.icon" /></el-icon>
            <span>{{ item.title }}</span>
          </template>
          
          <!-- 渲染子菜单项 -->
          <el-menu-item 
            v-for="child in item.children" 
            :key="child.path" 
            :index="child.path"
          >
            <el-icon><component :is="child.icon" /></el-icon>
            <template #title>{{ child.title }}</template>
          </el-menu-item>
        </el-sub-menu>
        
        <!-- 没有子菜单的情况 -->
        <el-menu-item v-else :index="item.path">
          <el-icon><component :is="item.icon" /></el-icon>
          <template #title>{{ item.title }}</template>
        </el-menu-item>
      </template>
    </el-menu>
  </div>
</template>

<style scoped>
.sidebar {
  height: 100%;
  background-color: #001529;
  width: 220px;
  transition: width 0.3s ease-in-out;
  box-shadow: 2px 0 6px rgba(0, 21, 41, 0.35);
  z-index: 10;
}

.is-collapsed {
  width: 64px;
}

.top-layout-sidebar {
  background-color: #001529;
  box-shadow: none;
  width: 220px;
}

.logo-container {
  height: 60px;
  padding: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
}

.logo {
  height: 32px;
  margin-right: 10px;
}

.title {
  color: white;
  font-size: 18px;
  font-weight: 600;
  white-space: nowrap;
  margin: 0;
}

.el-menu-vertical {
  border-right: none;
}

.el-menu-vertical:not(.el-menu--collapse) {
  width: 220px;
}
</style> 